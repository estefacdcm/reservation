// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/estefacdcm/reservation/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/estefacdcm/reservation/internal/application/model"
)

// IReservationUseCase is an autogenerated mock type for the IReservationUseCase type
type IReservationUseCase struct {
	mock.Mock
}

// GetReservartionByNumberUseCase provides a mock function with given fields: reservationNumber
func (_m *IReservationUseCase) GetReservartionByNumberUseCase(reservationNumber int64) ([]dto.ReservationDTO, error) {
	ret := _m.Called(reservationNumber)

	var r0 []dto.ReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]dto.ReservationDTO, error)); ok {
		return rf(reservationNumber)
	}
	if rf, ok := ret.Get(0).(func(int64) []dto.ReservationDTO); ok {
		r0 = rf(reservationNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(reservationNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByCustomerIDUseCase provides a mock function with given fields: customerID
func (_m *IReservationUseCase) GetReservationByCustomerIDUseCase(customerID string) ([]dto.ReservationDTO, error) {
	ret := _m.Called(customerID)

	var r0 []dto.ReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.ReservationDTO, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.ReservationDTO); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveReservationUseCase provides a mock function with given fields: reservationModel
func (_m *IReservationUseCase) SaveReservationUseCase(reservationModel *model.ReservationModel) (*dto.ReservationDTO, error) {
	ret := _m.Called(reservationModel)

	var r0 *dto.ReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ReservationModel) (*dto.ReservationDTO, error)); ok {
		return rf(reservationModel)
	}
	if rf, ok := ret.Get(0).(func(*model.ReservationModel) *dto.ReservationDTO); ok {
		r0 = rf(reservationModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ReservationModel) error); ok {
		r1 = rf(reservationModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIReservationUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIReservationUseCase creates a new instance of IReservationUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIReservationUseCase(t mockConstructorTestingTNewIReservationUseCase) *IReservationUseCase {
	mock := &IReservationUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

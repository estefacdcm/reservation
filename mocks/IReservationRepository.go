// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/estefacdcm/reservation/internal/domain/dto"
	entity "github.com/estefacdcm/reservation/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IReservationRepository is an autogenerated mock type for the IReservationRepository type
type IReservationRepository struct {
	mock.Mock
}

// FindReservartionByNumber provides a mock function with given fields: reservationNumber
func (_m *IReservationRepository) FindReservartionByNumber(reservationNumber int64) ([]dto.ReservationDTO, error) {
	ret := _m.Called(reservationNumber)

	var r0 []dto.ReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]dto.ReservationDTO, error)); ok {
		return rf(reservationNumber)
	}
	if rf, ok := ret.Get(0).(func(int64) []dto.ReservationDTO); ok {
		r0 = rf(reservationNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(reservationNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReservationByCustomerID provides a mock function with given fields: customerID
func (_m *IReservationRepository) FindReservationByCustomerID(customerID string) ([]dto.ReservationDTO, error) {
	ret := _m.Called(customerID)

	var r0 []dto.ReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.ReservationDTO, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.ReservationDTO); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveReservation provides a mock function with given fields: reservationEntity
func (_m *IReservationRepository) SaveReservation(reservationEntity *entity.ReservationEntity) (*entity.ReservationEntity, error) {
	ret := _m.Called(reservationEntity)

	var r0 *entity.ReservationEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.ReservationEntity) (*entity.ReservationEntity, error)); ok {
		return rf(reservationEntity)
	}
	if rf, ok := ret.Get(0).(func(*entity.ReservationEntity) *entity.ReservationEntity); ok {
		r0 = rf(reservationEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ReservationEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.ReservationEntity) error); ok {
		r1 = rf(reservationEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIReservationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIReservationRepository creates a new instance of IReservationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIReservationRepository(t mockConstructorTestingTNewIReservationRepository) *IReservationRepository {
	mock := &IReservationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
